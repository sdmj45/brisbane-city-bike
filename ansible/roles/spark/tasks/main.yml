---
  - name: set spark distribution fact
    set_fact: spark_path=spark-{{ spark_var.version }}-bin-hadoop{{ spark_var.hadoop_version }}

  - name: debug
    debug:
      msg: "{{ ansible_host }}"

  - name: create group
    group:
      name: "{{ spark.user_group }}"
      state: present
    become: true
    tags: spark-node

  - name: create user
    user:
      name: "{{ spark.user }}"
      group: spark
    become: true
    tags: spark-node

  - name: create spark working directory
    file:
      path: "{{ spark.working_dir }}"
      state: directory
      owner: "{{ spark.user}}"
      group: "{{ spark.user_group }}"
    become: true
    tags: spark-node

  - name: create install directory 
    file:
      path: "{{ spark_var.install_dir }}"
      state: directory
      owner: "{{ spark.user }}"
      group: "{{ spark.user_group }}"
    become: true
    tags: spark-node

  - name: Check if the version of spark already exists
    stat:
      path: "{{ spark_var.install_dir }}/{{ spark_path }}"
    register: spark_install_path

  - name: download spark 
    get_url:  url="{{ spark.mirror }}/spark-{{ spark_var.version }}/{{ spark_path }}.tgz" 
              dest="{{ spark.temp_dir }}/{{ spark_path }}.tgz"
              validate_certs=no
    when: spark_install_path.stat.exists == False
    tags: spark-node

  - name: unarchive to the install directory
    unarchive:
      src: "{{ spark.temp_dir }}/{{ spark_path }}.tgz"
      dest: "{{ spark_var.install_dir }}"
      copy: no
      owner: "{{ spark.user }}"
      group: "{{ spark.user_group }}"
      creates: "{{ spark_var.install_dir }}/{{ spark_path }}"
    tags: spark-node

  - name: set spark-env.sh
    template: src="spark-env-sh.j2" dest="{{ spark_var.install_dir }}/{{ spark_path }}/conf/spark-env.sh"
    become: true
    tags: spark-node

  - name: set spark-defaults.conf
    template: src="spark-defaults-conf.j2" dest="{{ spark_var.install_dir}}/{{ spark_path }}/conf/spark-defaults.conf"
    become: true
    tags: spark-node

  - name: Check if systemd exists
    stat: path=/lib/systemd/system/
    register: systemd_check

  - name: copy master systemd start scripts
    template:
      src: "spark-master-systemd.j2"
      dest: /etc/systemd/system/spark-master.service
      owner: root
      group: root
    become: true
    when: systemd_check.stat.exists == true and ( inventory_hostname in groups['spark-masters'] )
    notify: 
      - restart spark-master
    tags: spark-node

  - name: copy worker systemd start scripts
    template:
      src: "spark-worker-systemd.j2"
      dest: /etc/systemd/system/spark-worker.service
      owner: root
      group: root
    become: true
    when: systemd_check.stat.exists == true and ( inventory_hostname in groups['spark-workers'] )
    notify: 
      - restart spark-worker
    tags: spark-node

  - name: start spark masters
    service: name=spark-master state=started enabled=yes 
    when: inventory_hostname in groups['spark-masters']
    become: true

  - name: start spark workers
    service: name=spark-worker state=started enabled=yes 
    when: inventory_hostname in groups['spark-workers']
    become: true